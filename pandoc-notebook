#!/bin/bash
# Author: Marc Weber

#==========================================================
# ARGUMENT PARSING USING enhanced getopt

# saner programming env: these switches turn some bugs into errors
set -o errexit -o pipefail -o noclobber -o nounset

! getopt --test > /dev/null 
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo "I’m sorry, `getopt --test` failed in this environment."
    exit 1
fi

OPTIONS=tvo:
LONGOPTS=outfmt:,toc,toc-depth:,wordpress,verbose

# -use ! and PIPESTATUS to get exit code with errexit set
# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 2
fi
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

# Default values
OUTFMT=all
WORDPRESS=false
TOC=false
TOC_DEPTH=3
VERBOSE=false
# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -o|--outfmt)
            OUTFMT="$2"
            shift 2
            ;;
        -t|--toc)
            TOC=true
            shift
            ;;
        --toc-depth)
            TOC_DEPTH="$2"
            shift 2
            ;;
        --wordpress)
            WORDPRESS=true
            shift
            ;;
        -v|--verbose)
            VERBOSE=true
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 3
            ;;
    esac
done

# handle non-option arguments
if [[ $# -ne 1 ]]; then
    echo "$0: A single input file is required."
    exit 4
fi

# echo "verbose: $VERBOSE, OUTFMT: $OUTFMT, wordpress: $WORDPRESS, toc: $TOC, toc-depth: $TOC_DEPTH, in: $1"

#==========================================================

INPUT_FILE=$1
DATA_DIR="/users/lserrano/mweber/Research_cloud/Python_mwTools/pandoc-notebook"
OPTIONS_PANDOC=("--data-dir=$DATA_DIR" "--variable=css:$DATA_DIR/CSS/pandoc.css" "--variable=toctitle:Table of contents")
# for value in "${OPTIONS_PANDOC[@]}"; do
#     echo $value
# done

if [[ ${INPUT_FILE} =~ \.md$ ]]; then
    echo "input file type is Markdown."
    BASENAME=${INPUT_FILE%.md}
elif [[ ${INPUT_FILE} =~ \.ipynb$ ]]; then
    echo "input file type is jupyter notebook."
    BASENAME=${INPUT_FILE%.ipynb}
    jupyter nbconvert "${INPUT_FILE}" --to markdown
fi

# Correcting caption such that we can use the following format in jupyter notebook:
# the purpose of which is to be able to display the legend below the figure in the
# rendered jupyter notebook.
#     ![](Images/image.png){#fig:Marks2016_initiation width=60%}[... legend]
# which will be transformed into the correct pandoc markdown syntax:
#     ![... legend](Images/image.png){#fig:Marks2016_initiation width=60%}
mdCorrectFigureCaption "${BASENAME}.md"
mdCorrectFigureCaption "${BASENAME}.md"
# Note: I don't know why but we need to run twice the script to substitute all captions.

if [[ $OUTFMT =~ ^(all)|(pdf)$ ]]; then
    echo "Converting to pdf..."
    # Note: that any use of --filter pandoc-citeproc or --bibliography=FILE should come after the pandoc-fignos filter
    # call. Note: The bibliography file is set in the YAML metadata. We could also use the pandoc command-line option
    # `--bibliography="${BIBLIOGRAPHY}"`
    OPTIONS=("${OPTIONS_PANDOC[@]}")
    OPTIONS+=("--filter" "pandoc-fignos" "--filter" "pandoc-citeproc" "--pdf-engine=xelatex")
    if [ "$TOC" = true ] ; then
        OPTIONS+=("--toc")
        OPTIONS+=("--toc-depth=$TOC_DEPTH")
    fi
    pandoc "${BASENAME}.md" -o "${BASENAME}.pdf" "${OPTIONS[@]}"
fi

if [[ $OUTFMT =~ ^(all)|(html)$ ]]; then
    echo "Converting to self-contained html..."
    OPTIONS=("${OPTIONS_PANDOC[@]}")
    # Produce no highlight version for direct visualization with images self-contained
    OPTIONS+=("--to=html5" "--filter" "pandoc-fignos" "--filter" "pandoc-citeproc" "--mathjax" "--self-contained")
    if [ "$TOC" = true ] ; then
        OPTIONS+=("--toc")
        OPTIONS+=("--toc-depth=$TOC_DEPTH")
    fi
    pandoc "${BASENAME}.md" -o "${BASENAME}.self-contained.html" "${OPTIONS[@]}"

    # We need to include the MathJax script using the Content Delivery Network (CDN)
    # the script will get loaded from online location when page is rendered and
    # MathJax script will render latex equations on the local browser.
    # Note that using the CDN, online connection is needed in order to load the MathJax script.
    insert_mathjax_script_in_html_header "${BASENAME}.self-contained.html"
fi

if [[ "$WORDPRESS" = true ]] ; then
    echo "Converting to adapted html and uploading to wordpress site..."
    # Note: the md2wordpress script needs some YAML configuration for wordpress site access
    # that should be present in the input markdown file.
    md2wordpress "${BASENAME}.md"
fi

